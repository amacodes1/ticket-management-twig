{% extends 'base.html.twig' %}

{% block content %}
<div class="bg-white dark:bg-[#111827] text-[#111827] px-6 md:px-16 lg:px-20 dark:text-white py-16 mt-14 mb-20 md:mb-26">
  <div class="relative flex h-auto min-h-screen w-full flex-col overflow-x-hidden">
    <div class="mx-auto max-w-7xl w-full">
      <header class="flex items-center bg-white dark:bg-[#111827] justify-between sticky top-0 z-10">
        <div class="flex items-center gap-3">
          <h1 class="text-xl font-bold leading-tight tracking-[-0.015em]">
            Manage your Tickets
          </h1>
        </div>
        <button
          id="create-ticket-btn"
          class="bg-[#9B8AFB] text-white cursor-pointer font-medium py-3 px-3 sm:px-5 rounded-full hover:bg-opacity-90 focus:outline-none transition-all flex items-center gap-2"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
          </svg>
          <span class="hidden sm:inline">Create New Ticket</span>
        </button>
      </header>
      
      <main class="mt-8">
        <div class="mb-8 md:flex md:justify-center">
          <div class="relative">
            <svg class="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
            <input
              id="ticket-search"
              class="w-full sm:w-[600px] md:w-[600px] lg:w-[800px] pl-12 pr-4 py-3 items-center justify-center rounded-full focus:outline-0 focus:ring-1 focus:ring-[#9B8AFB]/50 border border-gray-300 bg-white transition-shadow text-xs sm:text-base text-[#111827]"
              placeholder="Search tickets by title, description..."
              type="text"
            />
          </div>
        </div>
        
        <div id="tickets-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          <!-- Tickets will be loaded here -->
        </div>
      </main>
    </div>
  </div>
</div>

{% include 'components/ticket-form.html.twig' %}
{% include 'modals/delete-modal.html.twig' %}

<script>

document.addEventListener('DOMContentLoaded', function() {
  const createBtn = document.getElementById('create-ticket-btn');
  const modal = document.getElementById('ticket-modal');
  const cancelBtn = document.getElementById('cancel-modal');
  const form = document.getElementById('ticket-form');
  
  let ticketToEdit = null;
  let ticketToDelete = null;
  
  // Modal functions
  function openModal() {
    modal?.classList.remove('hidden');
  }
  
  function resetForm() {
    form?.reset();
    ticketToEdit = null;
    document.getElementById('modal-title').textContent = 'Create New Ticket';
    document.getElementById('submit-text').textContent = 'Create Ticket';
    clearErrors();
  }
  
  function clearErrors() {
    document.getElementById('title-error').textContent = '';
    document.getElementById('description-error').textContent = '';
    document.getElementById('status-error').textContent = '';
  }
  
  // Event listeners
  createBtn?.addEventListener('click', openModal);
  
  cancelBtn?.addEventListener('click', function() {
    modal?.classList.add('hidden');
    resetForm();
  });
  
  modal?.addEventListener('click', function(e) {
    if (e.target === modal) {
      modal.classList.add('hidden');
      resetForm();
    }
  });
  
  // Form submission
  form?.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const title = document.getElementById('title').value.trim();
    const description = document.getElementById('description').value.trim();
    const status = document.getElementById('status').value;
    
    clearErrors();
    
    if (!title) {
      document.getElementById('title-error').textContent = 'Title is required';
      toast.error('Title is required');
      return;
    }
    
    if (!description) {
      document.getElementById('description-error').textContent = 'Description is required';
      toast.error('Description is required');
      return;
    }
    
    if (ticketToEdit) {
      updateTicket(ticketToEdit.id, { title, description, status });
      toast.success('Ticket updated successfully!');
    } else {
      createTicket({ title, description, status });
      toast.success('Ticket created successfully!');
    }
    
    modal.classList.add('hidden');
    resetForm();
    loadTickets();
  });
  
  // Ticket operations
  function createTicket(data) {
    const ticket = {
      id: Date.now().toString() + Math.random().toString(36).substr(2),
      title: data.title,
      description: data.description,
      status: data.status,
      priority: 3,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    const tickets = JSON.parse(localStorage.getItem('tickets') || '[]');
    tickets.unshift(ticket);
    localStorage.setItem('tickets', JSON.stringify(tickets));
  }
  
  function updateTicket(id, data) {
    const tickets = JSON.parse(localStorage.getItem('tickets') || '[]');
    const index = tickets.findIndex(t => t.id === id);
    if (index !== -1) {
      tickets[index] = {
        ...tickets[index],
        ...data,
        updatedAt: new Date().toISOString()
      };
      localStorage.setItem('tickets', JSON.stringify(tickets));
    }
  }
  
  function deleteTicket(id) {
    const tickets = JSON.parse(localStorage.getItem('tickets') || '[]');
    const updatedTickets = tickets.filter(t => t.id !== id);
    localStorage.setItem('tickets', JSON.stringify(updatedTickets));
  }
  
  // Status functions
  function getStatusClass(status) {
    if (status === 'open') return 'bg-green-500/10 text-green-600';
    if (status === 'in_progress') return 'bg-amber-500/10 text-amber-600';
    return 'bg-gray-500/20 text-gray-600';
  }
  
  function formatStatus(status) {
    if (status === 'in_progress') return 'In Progress';
    if (status === 'open') return 'Open';
    return 'Closed';
  }
  
  // Render functions
  function renderTicketCard(ticket) {
    return `
      <div class="flex flex-col gap-4 bg-white dark:bg-gray-800/50 rounded-lg p-6 border border-gray-200 shadow-lg" data-ticket-id="${ticket.id}">
        <div class="flex items-center justify-between">
          <p class="text-xl font-bold text-[#111827] dark:text-white">${ticket.title}</p>
          <div class="flex items-center gap-2">
            <button class="p-2 rounded-full cursor-pointer hover:bg-gray-100 text-gray-600 edit-btn">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
              </svg>
            </button>
            <button class="p-2 rounded-full cursor-pointer hover:bg-gray-100 text-gray-600 delete-btn">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
              </svg>
            </button>
          </div>
        </div>
        <p class="text-gray-600 dark:text-gray-400 text-sm">${ticket.description}</p>
        <div class="flex items-center justify-between mt-2">
          <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${getStatusClass(ticket.status)}">
            ${formatStatus(ticket.status)}
          </span>
        </div>
      </div>
    `;
  }
  
  function renderEmptyState() {
    return `
      <div class="flex flex-col items-center justify-center gap-4 bg-white dark:bg-gray-800/50 rounded-lg p-6 border-2 border-dashed border-gray-300">
        <svg class="text-gray-400 dark:text-gray-500 w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
        </svg>
        <p class="text-gray-500 dark:text-gray-400">You have no more tickets.</p>
        <button id="empty-create-btn" class="bg-[#9B8AFB] text-white font-medium py-2 px-4 cursor-pointer rounded-lg hover:bg-opacity-90">
          Create New Ticket
        </button>
      </div>
    `;
  }
  
  // Load and display tickets
  function loadTickets() {
    const tickets = JSON.parse(localStorage.getItem('tickets') || '[]');
    const grid = document.getElementById('tickets-grid');
    
    if (tickets.length === 0) {
      grid.innerHTML = renderEmptyState();
      document.getElementById('empty-create-btn')?.addEventListener('click', openModal);
      return;
    }
    
    grid.innerHTML = tickets.map(renderTicketCard).join('');
    attachCardEventListeners();
  }
  
  function attachCardEventListeners() {
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const card = this.closest('[data-ticket-id]');
        const ticketId = card.dataset.ticketId;
        editTicket(ticketId);
      });
    });
    
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const card = this.closest('[data-ticket-id]');
        const ticketId = card.dataset.ticketId;
        showDeleteModal(ticketId);
      });
    });
  }
  
  // Edit and delete functions
  function editTicket(id) {
    const tickets = JSON.parse(localStorage.getItem('tickets') || '[]');
    ticketToEdit = tickets.find(t => t.id === id);
    if (ticketToEdit) {
      document.getElementById('title').value = ticketToEdit.title;
      document.getElementById('description').value = ticketToEdit.description || '';
      document.getElementById('status').value = ticketToEdit.status;
      
      document.getElementById('modal-title').textContent = `Edit Ticket #${ticketToEdit.id.slice(0, 8).toUpperCase()}`;
      document.getElementById('submit-text').textContent = 'Save Changes';
      
      modal?.classList.remove('hidden');
    }
  }
  
  function showDeleteModal(id) {
    ticketToDelete = id;
    document.getElementById('delete-modal')?.classList.remove('hidden');
  }
  
  // Delete modal handlers
  const deleteModal = document.getElementById('delete-modal');
  const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
  const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
  
  confirmDeleteBtn?.addEventListener('click', function() {
    if (ticketToDelete) {
      deleteTicket(ticketToDelete);
      toast.success('Ticket deleted successfully!');
      loadTickets();
      ticketToDelete = null;
    }
    deleteModal?.classList.add('hidden');
  });
  
  cancelDeleteBtn?.addEventListener('click', function() {
    ticketToDelete = null;
    deleteModal?.classList.add('hidden');
  });
  
  deleteModal?.addEventListener('click', function(e) {
    if (e.target === deleteModal) {
      ticketToDelete = null;
      deleteModal.classList.add('hidden');
    }
  });
  
  // Search functionality
  const searchInput = document.getElementById('ticket-search');
  searchInput?.addEventListener('input', function(e) {
    const query = e.target.value.toLowerCase().trim();
    const tickets = JSON.parse(localStorage.getItem('tickets') || '[]');
    
    if (query === '') {
      loadTickets();
      return;
    }
    
    const filteredTickets = tickets.filter(ticket => 
      ticket.title.toLowerCase().includes(query) || 
      ticket.description.toLowerCase().includes(query)
    );
    
    if (filteredTickets.length === 0) {
      toast.error('No tickets found matching your search');
      document.getElementById('tickets-grid').innerHTML = `
        <div class="flex flex-col items-center justify-center gap-4 bg-white dark:bg-gray-800/50 rounded-lg p-6 border-2 border-dashed border-gray-300">
          <svg class="text-gray-400 dark:text-gray-500 w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
          <p class="text-gray-500 dark:text-gray-400">No tickets found.</p>
        </div>
      `;
      return;
    }
    
    document.getElementById('tickets-grid').innerHTML = filteredTickets.map(renderTicketCard).join('');
    attachCardEventListeners();
  });
  
  // Initialize
  loadTickets();
});
</script>

{% endblock %}